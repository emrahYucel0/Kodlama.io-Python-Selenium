# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

""""
 AŞAĞIDAKİ TESTLER DAHA ÖNCE YAPTIĞIMIZ

 TESTLERE KARŞILIK OLARAK 

 SELENENIUM IDE İLE OLUŞTURULMUŞTUR
"""


class TestSeleniumIdeSuiteDemo():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  #Test 1 : Bu test fonksiyonu, kullanıcı adı ve şifre girilmeme durumunu simüle eder.
  def test_emptyUsernamePassword(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "login-button").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username is required"
  
  #Test 2: Bu test fonksiyonu, şifre girilmeme senaryosunu simüle eder
  def test_emptyPassword(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "login-button").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Password is required"
  
  #Test 3 : Bu test fonksiyonu, Engellenmiş kullanıcı bilgileri ile giriş durumunu simüle eder
  def test_lockedUser(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "user-name").send_keys("locked_out_user")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Sorry, this user has been locked out."

  #Test 4 : Bu test fonksiyonu, X ikonunun kapanması durumunu simüle eder
  def test_closedIcon(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "login-button").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".form_group:nth-child(1) > .svg-inline--fa")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".form_group:nth-child(2) > .svg-inline--fa")
    assert len(elements) > 0
    self.driver.find_element(By.CSS_SELECTOR, ".fa-times > path").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".form_group:nth-child(1) > .svg-inline--fa")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".form_group:nth-child(2) > .svg-inline--fa")
    assert len(elements) == 0
  
  #Test 5 :Bu test fonksiyonu, Ürün sayfasına giriş durumunu simüle eder
  def test_inventoryPage(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.vars["https://www.saucedemo.com"] = self.driver.execute_script("return window.location.href")
    assert(self.vars["https://www.saucedemo.com"] == "https://www.saucedemo.com/inventory.html")
  
  #Test 6 : Bu test fonksiyonu, Toplam ürün sayısını belirlemeyi simüle eder
  def test_inventoryItem(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    self.driver.find_element(By.ID, "user-name").click()
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.vars["productCount"] = len(self.driver.find_elements(By.XPATH, "//div[@class=\'inventory_item\']"))
    assert(self.vars["productCount"] == 6)
  
  #Test 7 : Bu test fonksiyonu, sayfadan çıkış seneryosunu simüle eder
  def test_logout(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.ID, "user-name")))
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    WebDriverWait(self.driver, 5).until(expected_conditions.visibility_of_element_located((By.ID, "password")))
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.driver.find_element(By.ID, "react-burger-menu-btn").click()
    self.driver.find_element(By.ID, "logout_sidebar_link").click()
    assert self.driver.title == "Swag Labs"

  ##Test 8 : Bu test fonksiyonu, alışveriş sepetinden ürünlerin bulunduğu sayfaya geçişi simüle eder
  def test_backToProduct(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "user-name")))
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "password")))
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-backpack").click()
    self.driver.find_element(By.LINK_TEXT, "1").click()
    self.driver.find_element(By.ID, "continue-shopping").click()
    elements = self.driver.find_elements(By.ID, "add-to-cart-sauce-labs-bike-light")
    assert len(elements) > 0

  #Test 9 : Bu test fonksiyonu, bir web sayfasında bir ürün satın almayı simüle eder
  def test_buyProduct(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located((By.ID, "user-name")))
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-backpack").click()
    self.driver.find_element(By.LINK_TEXT, "1").click()
    self.driver.find_element(By.ID, "checkout").click()
    self.driver.find_element(By.ID, "first-name").click()
    self.driver.find_element(By.ID, "first-name").send_keys("Emrah")
    self.driver.find_element(By.ID, "last-name").send_keys("Yücel")
    self.driver.find_element(By.ID, "postal-code").send_keys("1234")
    self.driver.find_element(By.ID, "continue").click()
    self.driver.find_element(By.ID, "finish").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".complete-text").text == "Your order has been dispatched, and will arrive just as fast as the pony can get there!"


  #Test Extra : Bu test fonksiyonu, posta kodu girilmememe durumunu test eder
  def test_emptyPostalCode(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "user-name")))
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "password")))
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-bike-light").click()
    self.driver.find_element(By.LINK_TEXT, "1").click()
    self.driver.find_element(By.ID, "checkout").click()
    self.driver.find_element(By.ID, "first-name").click()
    self.driver.find_element(By.ID, "first-name").send_keys("Emrah")
    self.driver.find_element(By.ID, "last-name").click()
    self.driver.find_element(By.ID, "last-name").send_keys("Yücel")
    self.driver.find_element(By.ID, "continue").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Error: Postal Code is required"

  #Test Extra : Bu test fonksiyonu, satın alınan tüm ürünler sonrası vergi eklenmiş son toplam fiyatı görmeyi simüle eder
  def test_totalPrice(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1552, 840)
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "user-name")))
    self.driver.find_element(By.ID, "user-name").send_keys("standard_user")
    WebDriverWait(self.driver, 1).until(expected_conditions.visibility_of_element_located((By.ID, "password")))
    self.driver.find_element(By.ID, "password").send_keys("secret_sauce")
    self.driver.find_element(By.ID, "login-button").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-backpack").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-bike-light").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-fleece-jacket").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-bolt-t-shirt").click()
    self.driver.find_element(By.ID, "add-to-cart-sauce-labs-onesie").click()
    self.driver.find_element(By.ID, "add-to-cart-test.allthethings()-t-shirt-(red)").click()
    self.driver.find_element(By.LINK_TEXT, "6").click()
    self.driver.find_element(By.ID, "checkout").click()
    self.driver.find_element(By.ID, "first-name").click()
    self.driver.find_element(By.ID, "first-name").send_keys("Emrah")
    self.driver.find_element(By.ID, "last-name").click()
    self.driver.find_element(By.ID, "last-name").send_keys("Yücel")
    self.driver.find_element(By.ID, "postal-code").click()
    self.driver.find_element(By.ID, "postal-code").send_keys("1234")
    self.driver.find_element(By.ID, "continue").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".summary_total_label").text == "Total: $140.34"
  
